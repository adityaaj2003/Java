# app/repos.py
import os
import shutil
import tempfile
from git import Repo, GitCommandError

WORKSPACE_DIR = os.getenv("WORKSPACE_DIR", "/tmp/repos")

def safe_repo_dir_name(repo_url: str) -> str:
    # Basic safe name extraction
    name = repo_url.rstrip("/").split("/")[-1]
    if name.endswith(".git"):
        name = name[:-4]
    return name.replace(" ", "_")

def clone_repo(repo_url: str, branch: str = None) -> dict:
    """
    Clone repository into workspace and return metadata.
    """
    os.makedirs(WORKSPACE_DIR, exist_ok=True)
    repo_name = safe_repo_dir_name(repo_url)
    target_dir = os.path.join(WORKSPACE_DIR, repo_name)
    # If exists, remove or use unique temp
    if os.path.exists(target_dir):
        # create a timestamped directory
        target_dir = os.path.join(WORKSPACE_DIR, f"{repo_name}_{int(os.times().system)}")
    try:
        repo = Repo.clone_from(repo_url, target_dir)
        if branch:
            repo.git.checkout(branch)
        return {"status": "ok", "repo_name": repo_name, "path": target_dir}
    except GitCommandError as e:
        return {"status": "error", "error": str(e)}
